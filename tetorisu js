const grid = document.getElementById("grid");
const rows = 20;
const cols = 10;
const cells = [];

// フィールド描画
for (let i = 0; i < rows * cols; i++) {
  const cell = document.createElement("div");
  cell.classList.add("cell");
  grid.appendChild(cell);
  cells.push(cell);
}

// ミノ定義（回転形含む）
const MINOS = {
  I: [
    [[0,1], [1,1], [2,1], [3,1]],
    [[2,0], [2,1], [2,2], [2,3]],
  ],
  O: [
    [[0,0], [1,0], [0,1], [1,1]]
  ],
  T: [
    [[1,0], [0,1], [1,1], [2,1]],
    [[1,0], [1,1], [2,1], [1,2]],
    [[0,1], [1,1], [2,1], [1,2]],
    [[1,0], [0,1], [1,1], [1,2]],
  ],
  S: [
    [[1,0], [2,0], [0,1], [1,1]],
    [[1,0], [1,1], [2,1], [2,2]],
  ],
  Z: [
    [[0,0], [1,0], [1,1], [2,1]],
    [[2,0], [1,1], [2,1], [1,2]],
  ],
  J: [
    [[0,0], [0,1], [1,1], [2,1]],
    [[1,0], [2,0], [1,1], [1,2]],
    [[0,1], [1,1], [2,1], [2,2]],
    [[0,2], [1,0], [1,1], [1,2]],
  ],
  L: [
    [[2,0], [0,1], [1,1], [2,1]],
    [[1,0], [1,1], [1,2], [2,2]],
    [[0,1], [1,1], [2,1], [0,2]],
    [[0,0], [1,0], [1,1], [1,2]],
  ]
};

let field = Array.from({ length: rows }, () => Array(cols).fill(null));
let currentMino = null;
let pos = { x: 3, y: 0 };
let rotation = 0;
let gameOver = false;

// ランダムミノ生成
function spawnMino() {
  const keys = Object.keys(MINOS);
  const type = keys[Math.floor(Math.random() * keys.length)];
  currentMino = {
    type,
    shape: MINOS[type],
    rotation: 0,
  };
  pos = { x: 3, y: 0 };
  if (!isValidMove(pos.x, pos.y, currentMino.shape[rotation])) {
    gameOver = true;
    alert("ゲームオーバー！");
  }
  drawMino();
}

// ミノ描画
function drawMino() {
  currentMino.shape[rotation].forEach(([dx, dy]) => {
    const x = pos.x + dx;
    const y = pos.y + dy;
    if (y >= 0) {
      cells[y * cols + x].classList.add("block", currentMino.type);
    }
  });
}

// ミノ消去
function clearMino() {
  currentMino.shape[rotation].forEach(([dx, dy]) => {
    const x = pos.x + dx;
    const y = pos.y + dy;
    if (y >= 0) {
      cells[y * cols + x].className = "cell";
    }
  });
}

// 有効移動判定
function isValidMove(x, y, shape) {
  return shape.every(([dx, dy]) => {
    const nx = x + dx;
    const ny = y + dy;
    return (
      nx >= 0 &&
      nx < cols &&
      ny < rows &&
      (ny < 0 || field[ny][nx] === null)
    );
  });
}

// ミノ固定
function fixMino() {
  currentMino.shape[rotation].forEach(([dx, dy]) => {
    const x = pos.x + dx;
    const y = pos.y + dy;
    if (y >= 0) {
      field[y][x] = currentMino.type;
    }
  });
}

// ライン消去
function clearLines() {
  for (let y = rows - 1; y >= 0; y--) {
    if (field[y].every(cell => cell)) {
      field.splice(y, 1);
      field.unshift(Array(cols).fill(null));
      y++;
    }
  }
  updateField();
}

// フィールド再描画
function updateField() {
  for (let y = 0; y < rows; y++) {
    for (let x = 0; x < cols; x++) {
      const index = y * cols + x;
      const cell = field[y][x];
      cells[index].className = "cell";
      if (cell) cells[index].classList.add("block", cell);
    }
  }
}

// 落下処理
function fall() {
  if (gameOver) return;
  clearMino();
  const nextY = pos.y + 1;
  if (isValidMove(pos.x, nextY, currentMino.shape[rotation])) {
    pos.y = nextY;
  } else {
    fixMino();
    clearLines();
    spawnMino();
  }
  drawMino();
}

// ハードドロップ
function hardDrop() {
  clearMino();
  while (isValidMove(pos.x, pos.y + 1, currentMino.shape[rotation])) {
    pos.y++;
  }
  drawMino();
}

// 回転
function rotateRight() {
  const next = (rotation + 1) % currentMino.shape.length;
  if (isValidMove(pos.x, pos.y, currentMino.shape[next])) {
    clearMino();
    rotation = next;
    currentMino.rotation = rotation;
    drawMino();
  }
}

function rotateLeft() {
  const next = (rotation - 1 + currentMino.shape.length) % currentMino.shape.length;
  if (isValidMove(pos.x, pos.y, currentMino.shape[next])) {
    clearMino();
    rotation = next;
    currentMino.rotation = rotation;
    drawMino();
  }
}
// 左右移動
function move(dx) {
  const nextX = pos.x + dx;
  if (isValidMove(nextX, pos.y, currentMino.shape[rotation])) {
    clearMino();
    pos.x = nextX;
    drawMino();
  }
}

// キー操作
document.addEventListener("keydown", e => {
  if (gameOver) return;
  switch (e.key) {
    case "ArrowLeft": move(-1); break;
    case "ArrowRight": move(1); break;
    case "ArrowDown": fall(); break;
    case "w":
    case "w": rotateRight(); break;
    case "q":
    case "q": rotateLeft(); break;
    case " ": hardDrop(); break;
  }
});

// ゲームループ
function loop() {
  if (!gameOver) {
    fall();
    setTimeout(loop, 500); // 落下速度調整
  }
}

spawnMino();
drawMino();
loop();
